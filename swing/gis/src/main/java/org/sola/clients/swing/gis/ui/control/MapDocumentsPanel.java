/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sola.clients.swing.gis.ui.control;

import java.util.ArrayList;
import java.util.List;
import org.sola.clients.beans.application.ApplicationBean;
import org.sola.clients.beans.digitalarchive.DocumentBean;
import org.sola.clients.swing.gis.ui.controlsbundle.ControlsBundleForTransaction;
import org.sola.clients.swing.ui.source.DocumentsManagementPanel;
import org.sola.services.boundary.wsclients.WSManager;
import org.sola.webservices.transferobjects.digitalarchive.DocumentBinaryTO;

/**
 * Panel that is used to manage the documents used during GIS related transactions.
 * 
 * @author Elton Manoku
 */
public class MapDocumentsPanel extends javax.swing.JPanel {

    private ApplicationBean applicationBean;
    private ControlsBundleForTransaction mapControl;

    /**
     * Creates new form MapDocumentsPanel
     */
    public MapDocumentsPanel() {
        initComponents();
    }
    
    public MapDocumentsPanel(
            ControlsBundleForTransaction mapControl, ApplicationBean applicationBean){
        this.mapControl = mapControl;
        this.applicationBean = applicationBean;
        initComponents();
    }

    private DocumentsManagementPanel createDocumentsPanel() {
        if (applicationBean == null) {
            applicationBean = new ApplicationBean();
        }

        boolean allowEdit = true;

        DocumentsManagementPanel panel = new DocumentsManagementPanel(
                new ArrayList<String>(),applicationBean, allowEdit);
        return panel;
    }
    
    /**
     * Sets list of source ids
     * @param ids 
     */
    public final void setSourceIds(List<String> ids){
        documentsPanel.loadSourcesByIds(ids);
    }
    
    /**
     * Gets list of source ids
     * @return 
     */
    public final List getSourceIds(){
        return documentsPanel.getSourceIds(false);
    }
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        documentsPanel = createDocumentsPanel();
        cmdAddInMap = new javax.swing.JButton();

        jScrollPane1.setViewportView(documentsPanel);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/sola/clients/swing/gis/ui/control/Bundle"); // NOI18N
        cmdAddInMap.setText(bundle.getString("MapDocumentsPanel.cmdAddInMap.text")); // NOI18N
        cmdAddInMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddInMapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 159, Short.MAX_VALUE)
                        .addComponent(cmdAddInMap)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmdAddInMap)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmdAddInMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddInMapActionPerformed
        //TBD
        if (documentsPanel.getSelectedSourceBean() == null){
            //No source has been selected
            return;
        }
        DocumentBean documentBean =  documentsPanel.getSelectedSourceBean().getArchiveDocument();
        if (documentBean == null){
            //No attachement
            return;
        }
//        DocumentBinaryTO documentBinary = WSManager.getInstance().getDigitalArchive().getDocument(
//                documentBean.getId());
//        documentBinary.getFileName();
    }//GEN-LAST:event_cmdAddInMapActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdAddInMap;
    private org.sola.clients.swing.ui.source.DocumentsManagementPanel documentsPanel;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

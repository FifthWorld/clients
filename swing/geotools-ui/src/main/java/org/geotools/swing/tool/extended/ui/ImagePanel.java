/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImagePanel.java
 *
 * Created on Mar 5, 2012, 12:49:16 PM
 */
package org.geotools.swing.tool.extended.ui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

/**
 *
 * @author Elton Manoku
 */
public class ImagePanel extends javax.swing.JPanel {

    private boolean firstPointMode = true;
    private BufferedImage image;
    private Integer firstPointX;
    private Integer firstPointY;
    private Integer secondPointX;
    private Integer secondPointY;
    private Integer firstPointMomentImageWidth;
    private Integer firstPointMomentImageHeight;
    private Integer secondPointMomentImageWidth;
    private Integer secondPointMomentImageHeight;
    private Integer pointGraphicDimesion = 10;
    private Color pointGraphicColor = Color.GREEN;
    private Integer pointGraphicStrokeWidth = 3;

    /** Creates new form ImagePanel */
    public ImagePanel() {
        initComponents();
    }

    public void setImage(BufferedImage image) {
        this.image = image;
    }

    public Integer getFirstPointX() {
        if (firstPointX == null || image == null){
            return null;
        }
        return firstPointX * image.getWidth() / this.firstPointMomentImageWidth;
    }

    public Integer getFirstPointY() {
        if (firstPointY == null || image == null){
            return null;
        }
        return firstPointY * image.getHeight() / this.firstPointMomentImageHeight;
    }

    public Integer getSecondPointX() {
        if (secondPointX == null || image == null){
            return null;
        }
        return secondPointX * image.getWidth() / this.secondPointMomentImageWidth;
    }

    public Integer getSecondPointY() {
        if (secondPointY == null || image == null){
            return null;
        }
        return secondPointY * image.getHeight() / this.secondPointMomentImageHeight;
    }
    
    public Integer getImageWidth(){
        if (image == null){
            return null;
        }
        return image.getWidth();
    }

    public Integer getImageHeight(){
        if (image == null){
            return null;
        }
        return image.getHeight();
    }

    public void resetFirstPoint(){
        this.firstPointX = null;
        this.firstPointY = null;
        this.firstPointMomentImageWidth = null;
        this.firstPointMomentImageHeight = null;
    }

    public void resetSecondPoint(){
        this.secondPointX = null;
        this.secondPointY = null;
        this.secondPointMomentImageWidth = null;
        this.secondPointMomentImageHeight = null;
        
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        if (image == null) {
            return;
        }
        g.drawImage(image, 0, 0, this.getWidth(), this.getHeight(), null);
        if (firstPointX != null && firstPointY != null) {
            Integer xToDraw = firstPointX * this.getWidth() / this.firstPointMomentImageWidth;
            Integer yToDraw = firstPointY * this.getHeight() / this.firstPointMomentImageHeight;
            this.drawPoint(xToDraw, yToDraw, pointGraphicDimesion, g);
        }
        if (secondPointX != null && secondPointY != null) {
            Integer xToDraw =
                    secondPointX * this.getWidth() / this.secondPointMomentImageWidth;
            Integer yToDraw =
                    secondPointY * this.getHeight() / this.secondPointMomentImageHeight;
            this.drawPoint(xToDraw, yToDraw, pointGraphicDimesion, g);
        }
    }

    protected void drawPoint(Integer x, Integer y, Integer graphicDimension, Graphics g) {
        g.setColor(this.pointGraphicColor);
        ((Graphics2D) g).setStroke(new BasicStroke(this.pointGraphicStrokeWidth));
        Integer halfDimesion = graphicDimension / 2;
        g.drawLine(x - halfDimesion, y - halfDimesion, x + halfDimesion, y + halfDimesion);
        g.drawLine(x - halfDimesion, y + halfDimesion, x + halfDimesion, y - halfDimesion);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
    if (this.firstPointMode) {
        this.firstPointX = evt.getX();
        this.firstPointY = evt.getY();
        this.firstPointMomentImageWidth = this.getWidth();
        this.firstPointMomentImageHeight = this.getHeight();
        this.resetSecondPoint();
    } else {
        this.secondPointX = evt.getX();
        this.secondPointY = evt.getY();
        this.secondPointMomentImageWidth = this.getWidth();
        this.secondPointMomentImageHeight = this.getHeight();
    }
    this.repaint();
    this.firstPointMode = !this.firstPointMode;
}//GEN-LAST:event_formMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
